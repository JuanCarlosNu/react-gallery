{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.throttleDebounce = {}));\n})(this, function (exports) {\n  'use strict';\n  /* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n  /**\n   * Throttle execution of a function. Especially useful for rate limiting\n   * execution of handlers on events like resize and scroll.\n   *\n   * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n   * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n   *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n   *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n   *                                    the internal counter is reset).\n   * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n   *                                    to `callback` when the throttled-function is executed.\n   * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n   *                                    schedule `callback` to execute after `delay` ms.\n   *\n   * @returns {Function}  A new, throttled, function.\n   */\n\n  function throttle(delay, noTrailing, callback, debounceMode) {\n    /*\n     * After wrapper has stopped being called, this timeout ensures that\n     * `callback` is executed at the proper times in `throttle` and `end`\n     * debounce modes.\n     */\n    var timeoutID;\n    var cancelled = false; // Keep track of the last time `callback` was executed.\n\n    var lastExec = 0; // Function to clear existing timeout\n\n    function clearExistingTimeout() {\n      if (timeoutID) {\n        clearTimeout(timeoutID);\n      }\n    } // Function to cancel next exec\n\n\n    function cancel() {\n      clearExistingTimeout();\n      cancelled = true;\n    } // `noTrailing` defaults to falsy.\n\n\n    if (typeof noTrailing !== 'boolean') {\n      debounceMode = callback;\n      callback = noTrailing;\n      noTrailing = undefined;\n    }\n    /*\n     * The `wrapper` function encapsulates all of the throttling / debouncing\n     * functionality and when executed will limit the rate at which `callback`\n     * is executed.\n     */\n\n\n    function wrapper() {\n      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n        arguments_[_key] = arguments[_key];\n      }\n\n      var self = this;\n      var elapsed = Date.now() - lastExec;\n\n      if (cancelled) {\n        return;\n      } // Execute `callback` and update the `lastExec` timestamp.\n\n\n      function exec() {\n        lastExec = Date.now();\n        callback.apply(self, arguments_);\n      }\n      /*\n       * If `debounceMode` is true (at begin) this is used to clear the flag\n       * to allow future `callback` executions.\n       */\n\n\n      function clear() {\n        timeoutID = undefined;\n      }\n\n      if (debounceMode && !timeoutID) {\n        /*\n         * Since `wrapper` is being called for the first time and\n         * `debounceMode` is true (at begin), execute `callback`.\n         */\n        exec();\n      }\n\n      clearExistingTimeout();\n\n      if (debounceMode === undefined && elapsed > delay) {\n        /*\n         * In throttle mode, if `delay` time has been exceeded, execute\n         * `callback`.\n         */\n        exec();\n      } else if (noTrailing !== true) {\n        /*\n         * In trailing throttle mode, since `delay` time has not been\n         * exceeded, schedule `callback` to execute `delay` ms after most\n         * recent execution.\n         *\n         * If `debounceMode` is true (at begin), schedule `clear` to execute\n         * after `delay` ms.\n         *\n         * If `debounceMode` is false (at end), schedule `callback` to\n         * execute after `delay` ms.\n         */\n        timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n      }\n    }\n\n    wrapper.cancel = cancel; // Return the wrapper function.\n\n    return wrapper;\n  }\n  /* eslint-disable no-undefined */\n\n  /**\n   * Debounce execution of a function. Debouncing, unlike throttling,\n   * guarantees that a function is only executed a single time, either at the\n   * very beginning of a series of calls, or at the very end.\n   *\n   * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n   * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n   *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n   *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n   * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n   *                                  to `callback` when the debounced-function is executed.\n   *\n   * @returns {Function} A new, debounced function.\n   */\n\n\n  function debounce(delay, atBegin, callback) {\n    return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n  }\n\n  exports.debounce = debounce;\n  exports.throttle = throttle;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":";;;;EAAA;;EAEA;;;;;;;;;;;;;;;;;EAgBe,kBAASA,KAAT,EAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoD;IAClE;;;;;IAKA,IAAIC,SAAJ;IACA,IAAIC,SAAS,GAAG,KAAhB,CAPkE;;IAUlE,IAAIC,QAAQ,GAAG,CAAf,CAVkE;;IAalE,SAASC,oBAAT,GAAgC;MAC/B,IAAIH,SAAJ,EAAe;QACdI,YAAY,CAACJ,SAAD,CAAZI;MACA;IAhBgE;;;IAoBlE,SAASC,MAAT,GAAkB;MACjBF,oBAAoB;MACpBF,SAAS,GAAG,IAAZA;IAtBiE;;;IA0BlE,IAAI,OAAOJ,UAAP,KAAsB,SAA1B,EAAqC;MACpCE,YAAY,GAAGD,QAAfC;MACAD,QAAQ,GAAGD,UAAXC;MACAD,UAAU,GAAGS,SAAbT;IACA;IAED;;;;;;;IAKA,SAASU,OAAT,GAAgC;MAAA,kCAAZC,UAAY;QAAZA,UAAY,MAAZA,GAAYC,eAAZD;MAAY;;MAC/B,IAAIE,IAAI,GAAG,IAAX;MACA,IAAIC,OAAO,GAAGC,IAAI,CAACC,GAALD,KAAaV,QAA3B;;MAEA,IAAID,SAAJ,EAAe;QACd;MAL8B;;;MAS/B,SAASa,IAAT,GAAgB;QACfZ,QAAQ,GAAGU,IAAI,CAACC,GAALD,EAAXV;QACAJ,QAAQ,CAACiB,KAATjB,CAAeY,IAAfZ,EAAqBU,UAArBV;MACA;MAED;;;;;;MAIA,SAASkB,KAAT,GAAiB;QAChBhB,SAAS,GAAGM,SAAZN;MACA;;MAED,IAAID,YAAY,IAAI,CAACC,SAArB,EAAgC;QAC/B;;;;QAIAc,IAAI;MACJ;;MAEDX,oBAAoB;;MAEpB,IAAIJ,YAAY,KAAKO,SAAjBP,IAA8BY,OAAO,GAAGf,KAA5C,EAAmD;QAClD;;;;QAIAkB,IAAI;MALL,OAMO,IAAIjB,UAAU,KAAK,IAAnB,EAAyB;QAC/B;;;;;;;;;;;QAWAG,SAAS,GAAGiB,UAAU,CACrBlB,YAAY,GAAGiB,KAAH,GAAWF,IADF,EAErBf,YAAY,KAAKO,SAAjBP,GAA6BH,KAAK,GAAGe,OAArCZ,GAA+CH,KAF1B,CAAtBI;MAIA;IACD;;IAEDO,OAAO,CAACF,MAARE,GAAiBF,MAAjBE,CA9FkE;;IAiGlE,OAAOA,OAAP;EACA;ECpHD;;EAIA;;;;;;;;;;;;;;;;EAce,kBAASX,KAAT,EAAgBsB,OAAhB,EAAyBpB,QAAzB,EAAmC;IACjD,OAAOA,QAAQ,KAAKQ,SAAbR,GACJqB,QAAQ,CAACvB,KAAD,EAAQsB,OAAR,EAAiB,KAAjB,CADJpB,GAEJqB,QAAQ,CAACvB,KAAD,EAAQE,QAAR,EAAkBoB,OAAO,KAAK,KAA9B,CAFX;EAGA","names":["delay","noTrailing","callback","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","cancel","undefined","wrapper","arguments_","arguments","self","elapsed","Date","now","exec","apply","clear","setTimeout","atBegin","throttle"],"sources":["C:\\proyects\\React-proyects\\react-gallery\\node_modules\\throttle-debounce\\throttle.js","C:\\proyects\\React-proyects\\react-gallery\\node_modules\\throttle-debounce\\debounce.js"],"sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset).\n * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function}  A new, throttled, function.\n */\nexport default function(delay, noTrailing, callback, debounceMode) {\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel() {\n\t\tclearExistingTimeout();\n\t\tcancelled = true;\n\t}\n\n\t// `noTrailing` defaults to falsy.\n\tif (typeof noTrailing !== 'boolean') {\n\t\tdebounceMode = callback;\n\t\tcallback = noTrailing;\n\t\tnoTrailing = undefined;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\t/*\n\t\t\t * In throttle mode, if `delay` time has been exceeded, execute\n\t\t\t * `callback`.\n\t\t\t */\n\t\t\texec();\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","/* eslint-disable no-undefined */\n\nimport throttle from './throttle';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function(delay, atBegin, callback) {\n\treturn callback === undefined\n\t\t? throttle(delay, atBegin, false)\n\t\t: throttle(delay, callback, atBegin !== false);\n}\n"]},"metadata":{},"sourceType":"script"}